Index: mt76x2e-p4rev-113843/src/os/linux/cfg80211/cfg80211_util.c
===================================================================
--- mt76x2e-p4rev-113843.orig/src/os/linux/cfg80211/cfg80211_util.c
+++ mt76x2e-p4rev-113843/src/os/linux/cfg80211/cfg80211_util.c
@@ -320,15 +320,15 @@ BOOLEAN CFG80211_SupBandInit(
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,39))
 		if (IdLoop >= 14)
 		{
-			pChannels[IdLoop].band = IEEE80211_BAND_5GHZ;
+			pChannels[IdLoop].band = NL80211_BAND_5GHZ;
 			pChannels[IdLoop].center_freq = \
-			    		ieee80211_channel_to_frequency(Cfg80211_Chan[IdLoop], IEEE80211_BAND_5GHZ);
+			    		ieee80211_channel_to_frequency(Cfg80211_Chan[IdLoop], NL80211_BAND_5GHZ);
 		}
 		else
 		{
-			pChannels[IdLoop].band = IEEE80211_BAND_2GHZ;
+			pChannels[IdLoop].band = NL80211_BAND_2GHZ;
 		    pChannels[IdLoop].center_freq = \
-			    		ieee80211_channel_to_frequency(Cfg80211_Chan[IdLoop], IEEE80211_BAND_2GHZ);			
+			    		ieee80211_channel_to_frequency(Cfg80211_Chan[IdLoop], NL80211_BAND_2GHZ);
 		}
 #else
 		pChannels[IdLoop].center_freq = ieee80211_channel_to_frequency(Cfg80211_Chan[IdLoop]);
@@ -381,7 +381,7 @@ BOOLEAN CFG80211_SupBandInit(
  */	
 
 	/* 7. Fill the Band 2.4GHz */
-	pBand = &pCfg80211_CB->Cfg80211_bands[IEEE80211_BAND_2GHZ];
+	pBand = &pCfg80211_CB->Cfg80211_bands[NL80211_BAND_2GHZ];
 	if (pDriverBandInfo->RFICType & RFIC_24GHZ)
 	{
 		pBand->n_channels = CFG80211_NUM_OF_CHAN_2GHZ;
@@ -429,17 +429,17 @@ BOOLEAN CFG80211_SupBandInit(
 		pBand->ht_cap.mcs.tx_params = IEEE80211_HT_MCS_TX_DEFINED;
 #endif /* DOT11_N_SUPPORT */
 
-		pWiphy->bands[IEEE80211_BAND_2GHZ] = pBand;
+		pWiphy->bands[NL80211_BAND_2GHZ] = pBand;
 	}
 	else
 	{
-		pWiphy->bands[IEEE80211_BAND_2GHZ] = NULL;
+		pWiphy->bands[NL80211_BAND_2GHZ] = NULL;
 		pBand->channels = NULL;
 		pBand->bitrates = NULL;
 	}
 
 	/* 8. Fill the Band 5GHz */
-	pBand = &pCfg80211_CB->Cfg80211_bands[IEEE80211_BAND_5GHZ];
+	pBand = &pCfg80211_CB->Cfg80211_bands[NL80211_BAND_5GHZ];
 	if (pDriverBandInfo->RFICType & RFIC_5GHZ)
 	{
 		pBand->n_channels = CFG80211_NUM_OF_CHAN_5GHZ;
@@ -485,11 +485,11 @@ BOOLEAN CFG80211_SupBandInit(
 		pBand->ht_cap.mcs.tx_params = IEEE80211_HT_MCS_TX_DEFINED;
 #endif /* DOT11_N_SUPPORT */
 
-		pWiphy->bands[IEEE80211_BAND_5GHZ] = pBand;
+		pWiphy->bands[NL80211_BAND_5GHZ] = pBand;
 	}
 	else
 	{
-		pWiphy->bands[IEEE80211_BAND_5GHZ] = NULL;
+		pWiphy->bands[NL80211_BAND_5GHZ] = NULL;
 		pBand->channels = NULL;
 		pBand->bitrates = NULL;
 	}
@@ -662,8 +662,8 @@ BOOLEAN CFG80211OS_BandInfoGet(
 	if (pWiphy == NULL)
 		return FALSE;
 
-	*ppBand24 = pWiphy->bands[IEEE80211_BAND_2GHZ];
-	*ppBand5 = pWiphy->bands[IEEE80211_BAND_5GHZ];
+	*ppBand24 = pWiphy->bands[NL80211_BAND_2GHZ];
+	*ppBand5 = pWiphy->bands[NL80211_BAND_5GHZ];
 	return TRUE;
 }
 
@@ -772,9 +772,9 @@ BOOLEAN CFG80211OS_ChanInfoInit(
 	memset(pChan, 0, sizeof(*pChan));
 
 	if (ChanId > 14)
-		pChan->band = IEEE80211_BAND_5GHZ;
+		pChan->band = NL80211_BAND_5GHZ;
 	else
-		pChan->band = IEEE80211_BAND_2GHZ;
+		pChan->band = NL80211_BAND_2GHZ;
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,39))
 	pChan->center_freq = ieee80211_channel_to_frequency(ChanId, pChan->band);
@@ -1026,7 +1026,7 @@ VOID CFG80211OS_NewSta(IN PNET_DEV pNetD
 	NdisZeroMemory(&sinfo, sizeof(sinfo));
 
 /* If get error here, be sure patch the cfg80211_new_sta.patch into kernel. */
-	sinfo.filled = STATION_INFO_ASSOC_REQ_IES;
+/*	sinfo.filled = STATION_INFO_ASSOC_REQ_IES; */
 
 	mgmt = (struct ieee80211_mgmt *) assoc_frame;	
 	sinfo.assoc_req_ies_len = assoc_len - 24 - 4;
Index: mt76x2e-p4rev-113843/src/os/linux/cfg80211/cfg80211.c
===================================================================
--- mt76x2e-p4rev-113843.orig/src/os/linux/cfg80211/cfg80211.c
+++ mt76x2e-p4rev-113843/src/os/linux/cfg80211/cfg80211.c
@@ -44,15 +44,13 @@
 
 
 #define RTMP_MODULE_OS
-
-#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,10,0))
-#include <linux/random.h>
-#endif
 #include "rtmp_comm.h"
 #include "rt_os_util.h"
 #include "rt_os_net.h"
 #include "rt_config.h"
-
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,10,0))
+#include <linux/random.h>
+#endif
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,28))
 #ifdef RT_CFG80211_SUPPORT
@@ -829,7 +827,7 @@ static int CFG80211_OpsStaGet(
 	{
 		pSinfo->txrate.flags = RATE_INFO_FLAGS_MCS;
 		if (StaInfo.TxRateFlags & RT_CMD_80211_TXRATE_BW_40)
-			pSinfo->txrate.flags |= RATE_INFO_FLAGS_40_MHZ_WIDTH;
+			pSinfo->txrate.flags |= RATE_INFO_FLAGS_40_MHZ_WIDTH; /* unclear */
 
 		if (StaInfo.TxRateFlags & RT_CMD_80211_TXRATE_SHORT_GI)
 			pSinfo->txrate.flags |= RATE_INFO_FLAGS_SHORT_GI;
@@ -842,20 +840,38 @@ static int CFG80211_OpsStaGet(
 		pSinfo->txrate.legacy = StaInfo.TxRateMCS;
 	} 
 
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(4,0,0))
 	pSinfo->filled |= STATION_INFO_TX_BITRATE;
+#else
+    pSinfo->filled |= BIT(NL80211_STA_INFO_TX_BITRATE);
+#endif
 
 	/* fill signal */
 	pSinfo->signal = StaInfo.Signal;
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(4,0,0))
 	pSinfo->filled |= STATION_INFO_SIGNAL;
+#else
+    pSinfo->filled |= BIT(NL80211_STA_INFO_SIGNAL);
+#endif
+
 
 #ifdef CONFIG_AP_SUPPORT
 	/* fill tx count */
 	pSinfo->tx_packets = StaInfo.TxPacketCnt;
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(4,0,0))
 	pSinfo->filled |= STATION_INFO_TX_PACKETS;
+#else
+    pSinfo->filled |= BIT(NL80211_STA_INFO_TX_PACKETS);
+#endif
 
 	/* fill inactive time */
 	pSinfo->inactive_time = StaInfo.InactiveTime;
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(4,0,0))
 	pSinfo->filled |= STATION_INFO_INACTIVE_TIME;
+#else
+    pSinfo->filled |= BIT(NL80211_STA_INFO_INACTIVE_TIME);
+#endif
+
 #endif /* CONFIG_AP_SUPPORT */
 
 	return 0;
@@ -1653,10 +1669,10 @@ static int CFG80211_OpsSurveyGet(
 
 	/* return the information to upper layer */
 	pSurvey->channel = ((CFG80211_CB *)(SurveyInfo.pCfg80211))->pCfg80211_Channels;
-	pSurvey->filled = SURVEY_INFO_CHANNEL_TIME_BUSY |
-						SURVEY_INFO_CHANNEL_TIME_EXT_BUSY;
-	pSurvey->channel_time_busy = SurveyInfo.ChannelTimeBusy; /* unit: us */
-	pSurvey->channel_time_ext_busy = SurveyInfo.ChannelTimeExtBusy;
+	pSurvey->filled = NL80211_SURVEY_INFO_CHANNEL_TIME_BUSY |
+						NL80211_SURVEY_INFO_CHANNEL_TIME_EXT_BUSY;
+	pSurvey->time_busy = SurveyInfo.ChannelTimeBusy; /* unit: us */
+	pSurvey->time_ext_busy = SurveyInfo.ChannelTimeExtBusy;
 
 	CFG80211DBG(RT_DEBUG_TRACE, ("80211> busy time = %ld %ld\n",
 				(ULONG)SurveyInfo.ChannelTimeBusy,
