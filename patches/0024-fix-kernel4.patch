Index: mt76x2e-p4rev-113843/src/os/linux/cfg80211/cfg80211.c
===================================================================
--- mt76x2e-p4rev-113843.orig/src/os/linux/cfg80211/cfg80211.c
+++ mt76x2e-p4rev-113843/src/os/linux/cfg80211/cfg80211.c
@@ -246,6 +246,10 @@ static int CFG80211_OpsChannelSet(
 
 	CFG80211DBG(RT_DEBUG_TRACE, ("80211> %s ==>\n", __FUNCTION__));
 	MAC80211_PAD_GET(pAd, pWiphy);
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,6,0))
+    struct net_device *dev = NULL;
+    RTMP_DRIVER_NET_DEV_GET(pAd, &dev);
+#endif
 
 	/* get channel number */
 	ChanId = ieee80211_frequency_to_channel(pChan->center_freq);
@@ -827,12 +831,14 @@ static int CFG80211_OpsStaGet(
 	{
 		pSinfo->txrate.flags = RATE_INFO_FLAGS_MCS;
 		if (StaInfo.TxRateFlags & RT_CMD_80211_TXRATE_BW_40)
-			pSinfo->txrate.flags |= RATE_INFO_FLAGS_40_MHZ_WIDTH; /* unclear */
-
+#if (LINUX_VERSION_CODE) >= KERNEL_VERSION(4,0,0)
+            pSinfo->txrate.bw = RATE_INFO_BW_40;
+#else
+			pSinfo->txrate.flags |= RATE_INFO_FLAGS_40_MHZ_WIDTH;
+#endif
 		if (StaInfo.TxRateFlags & RT_CMD_80211_TXRATE_SHORT_GI)
 			pSinfo->txrate.flags |= RATE_INFO_FLAGS_SHORT_GI;
 
-
 		pSinfo->txrate.mcs = StaInfo.TxRateMCS;
 	}
 	else
@@ -854,7 +860,6 @@ static int CFG80211_OpsStaGet(
     pSinfo->filled |= BIT(NL80211_STA_INFO_SIGNAL);
 #endif
 
-
 #ifdef CONFIG_AP_SUPPORT
 	/* fill tx count */
 	pSinfo->tx_packets = StaInfo.TxPacketCnt;
@@ -1669,10 +1674,16 @@ static int CFG80211_OpsSurveyGet(
 
 	/* return the information to upper layer */
 	pSurvey->channel = ((CFG80211_CB *)(SurveyInfo.pCfg80211))->pCfg80211_Channels;
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,5,0)) /* not sure version */
+    pSurvey->filled = SURVEY_INFO_TIME_BUSY | SURVEY_INFO_EXT_BUSY;
+    pSurvey->time_busy = SurveyInfo.ChannelTimeBusy; /* unit: us */
+    pSurvey->time_ext_busy = SurveyInfo.ChannelTimeExtBusy;
+#else
 	pSurvey->filled = NL80211_SURVEY_INFO_CHANNEL_TIME_BUSY |
 						NL80211_SURVEY_INFO_CHANNEL_TIME_EXT_BUSY;
 	pSurvey->time_busy = SurveyInfo.ChannelTimeBusy; /* unit: us */
 	pSurvey->time_ext_busy = SurveyInfo.ChannelTimeExtBusy;
+#endif
 
 	CFG80211DBG(RT_DEBUG_TRACE, ("80211> busy time = %ld %ld\n",
 				(ULONG)SurveyInfo.ChannelTimeBusy,
@@ -1905,82 +1916,55 @@ static void CFG80211_OpsMgmtFrameRegiste
 
 //Supplicant_NEW_TDLS
 
-#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,6,0))
 static int CFG80211_OpsMgmtTx(
-    IN struct wiphy *pWiphy,
-    IN struct wireless_dev *wdev,
-    IN struct ieee80211_channel *pChan,
-    IN bool Offchan,
-    IN unsigned int Wait,
-    IN const u8 *pBuf,
-    IN size_t Len,
-    IN bool no_cck,	
-    IN bool done_wait_for_ack, 
-    IN u64 *pCookie)
-#else
-static int CFG80211_OpsMgmtTx(
-    IN struct wiphy *pWiphy,
-    IN struct net_device *pDev,
-    IN struct ieee80211_channel *pChan,
-    IN bool Offchan,
-    IN enum nl80211_channel_type ChannelType,
-    IN bool ChannelTypeValid,
-    IN unsigned int Wait,
-    IN const u8 *pBuf,
-    IN size_t Len,
-#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,2,0))
-    IN bool no_cck,	
-#endif
-#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,3,0))
-    IN bool done_wait_for_ack, 
-#endif
-    IN u64 *pCookie)
-#endif /* LINUX_VERSION_CODE: 3.6.0 */	
-{
-    VOID *pAd;
-    UINT32 ChanId;
+    IN struct wiphy                    *pWiphy,
+    IN struct wireless_dev             *wdev,
+    IN struct cfg80211_mgmt_tx_params  *params,
+    IN u64                             *pCookie)
+{
+    struct ieee80211_channel *pChan = params->chan;
+    bool Offchan = params->offchan;
+    unsigned int Wait = params->wait;
+    const u8 *pBuf = params->buf;
+    size_t Len = params->len;
+    bool no_cck = params->no_cck;
+    bool done_wait_for_ack = params->dont_wait_for_ack;
+    VOID *pAd;
+    UINT32 ChanId;
 
     CFG80211DBG(RT_DEBUG_INFO, ("80211> %s ==>\n", __FUNCTION__));
     MAC80211_PAD_GET(pAd, pWiphy);
+    struct net_device *dev = NULL;
+    RTMP_DRIVER_NET_DEV_GET(pAd, &dev);
 
-#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,6,0))
-	struct net_device *dev = NULL;
-	RTMP_DRIVER_NET_DEV_GET(pAd, &dev);
-#endif /* LINUX_VERSION_CODE: 3.6.0 */
-		
     /* get channel number */
     ChanId = ieee80211_frequency_to_channel(pChan->center_freq);
     CFG80211DBG(RT_DEBUG_INFO, ("80211> Mgmt Channel = %d\n", ChanId));
 
-	/* Send the Frame with basic rate 6 */
-#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,2,0))
-    if (no_cck)
-		; //pAd->isCfgDeviceInP2p = TRUE;
-#else
-		
-#endif	
-	
-    *pCookie = 5678;	
+    /* Send the Frame with basic rate 6 */
+    if (no_cck)                     // ?? Nothing in code?
+        ; //pAd->isCfgDeviceInP2p = TRUE;
+
+    *pCookie = 5678;
     RTMP_DRIVER_80211_CHANNEL_LOCK(pAd, ChanId);
     RTMP_DRIVER_80211_MGMT_FRAME_SEND(pAd, pBuf, Len);
-	
-	/* Mark it for using Supplicant-Based off-channel wait
-		if (Offchan)
-			RTMP_DRIVER_80211_CHANNEL_RESTORE(pAd);
-	 */
-	 
-    return 0;
-} 
 
+    /* Mark it for using Supplicant-Based off-channel wait
+        if (Offchan)
+            RTMP_DRIVER_80211_CHANNEL_RESTORE(pAd);
+     */
+
+    return 0;
+}
 
 static int CFG80211_OpsTxCancelWait(
-    IN struct wiphy *pWiphy,
-    IN struct net_device *pDev,
-    u64 cookie)
+    IN struct wiphy           *pWiphy,
+    IN struct wireless_dev    *pDev,
+    u64                     cookie)
 {
-	CFG80211DBG(RT_DEBUG_OFF, ("80211> %s ==>\n", __FUNCTION__));
-    	return 0;
-} 
+    CFG80211DBG(RT_DEBUG_OFF, ("80211> %s ==>\n", __FUNCTION__));
+    return 0;
+}
 
 static int CFG80211_OpsCancelRemainOnChannel(
     struct wiphy *pWiphy,
@@ -2244,123 +2228,103 @@ static int CFG80211_OpsChangeBss(
 	return 0;
 }
 
-static int CFG80211_OpsStaDel(
-	struct wiphy *pWiphy, 
-	struct net_device *dev,
-	UINT8 *pMacAddr)
+static int CFG80211_OpsStaDel (
+        IN struct wiphy                    *pWiphy,
+        IN struct net_device               *dev,
+        IN struct station_del_parameters   *params)
 {
-	VOID *pAd;
-	MAC80211_PAD_GET(pAd, pWiphy);
+    const u8 *pMacAddr = params->mac;
+    VOID *pAd;
+    MAC80211_PAD_GET(pAd, pWiphy);
 
-	CFG80211DBG(RT_DEBUG_TRACE, ("80211> %s ==>\n", __FUNCTION__));
-	if (pMacAddr ==  NULL)
-	{
-		RTMP_DRIVER_80211_AP_STA_DEL(pAd, NULL);
-	}
-	else
-	{
-		CFG80211DBG(RT_DEBUG_TRACE, ("80211> Delete STA(%02X:%02X:%02X:%02X:%02X:%02X) ==>\n", 
-					PRINT_MAC(pMacAddr)));
-		RTMP_DRIVER_80211_AP_STA_DEL(pAd, pMacAddr);
-	}
+    CFG80211DBG(RT_DEBUG_TRACE, ("80211> %s ==>\n", __FUNCTION__));
+    if (pMacAddr ==  NULL)
+    {
+        RTMP_DRIVER_80211_AP_STA_DEL(pAd, NULL);
+    }
+    else
+    {
+        CFG80211DBG(RT_DEBUG_TRACE, ("80211> Delete STA(%02X:%02X:%02X:%02X:%02X:%02X) ==>\n", PRINT_MAC(pMacAddr)));
+        RTMP_DRIVER_80211_AP_STA_DEL(pAd, pMacAddr);
+    }
 
-	return 0;
+    return 0;
 }
 
 static int CFG80211_OpsStaAdd(
-        struct wiphy *wiphy,
-        struct net_device *dev,
-        UINT8 *mac,
-	struct station_parameters *params)
+       IN struct wiphy                *wiphy,
+       IN struct net_device           *dev,
+       IN const UINT8                 *mac,
+       IN struct station_parameters   *params)
 {
-	CFG80211DBG(RT_DEBUG_TRACE, ("80211> %s ==>\n", __FUNCTION__));
-	return 0;
+    CFG80211DBG(RT_DEBUG_TRACE, ("80211> %s ==>\n", __FUNCTION__));
+    return 0;
 }
 
 static int CFG80211_OpsStaChg(
-	struct wiphy *pWiphy,
-	struct net_device *dev,
-	UINT8 *pMacAddr,
-	struct station_parameters *params)
+       IN struct wiphy                  *pWiphy,
+       IN struct net_device             *dev,
+       IN const u8                      *pMacAddr,
+       IN struct station_parameters     *params)
 {
-	void *pAd;
-	CFG80211_CB *p80211CB;
-   
-	CFG80211DBG(RT_DEBUG_TRACE, ("80211> Change STA(%02X:%02X:%02X:%02X:%02X:%02X) ==>\n", PRINT_MAC(pMacAddr)));
-	MAC80211_PAD_GET(pAd, pWiphy);
+    void *pAd;
+    CFG80211_CB *p80211CB;
 
-	p80211CB = NULL;
+    CFG80211DBG(RT_DEBUG_TRACE, ("80211> Change STA(%02X:%02X:%02X:%02X:%02X:%02X) ==>\n", PRINT_MAC(pMacAddr)));
+    MAC80211_PAD_GET(pAd, pWiphy);
+
+    p80211CB = NULL;
     RTMP_DRIVER_80211_CB_GET(pAd, &p80211CB);
 
     if ((dev->ieee80211_ptr->iftype != RT_CMD_80211_IFTYPE_AP) &&
-	   (dev->ieee80211_ptr->iftype != RT_CMD_80211_IFTYPE_P2P_GO))
-		return -EOPNOTSUPP;
-		
-	if(!(params->sta_flags_mask & BIT(NL80211_STA_FLAG_AUTHORIZED)))
-	{
-		CFG80211DBG(RT_DEBUG_ERROR, ("80211> %x ==>\n", params->sta_flags_mask));
-		return -EOPNOTSUPP;
-	}	
+       (dev->ieee80211_ptr->iftype != RT_CMD_80211_IFTYPE_P2P_GO))
+        return -EOPNOTSUPP;
 
-	if (params->sta_flags_set & BIT(NL80211_STA_FLAG_AUTHORIZED))
-	{
-		CFG80211DBG(RT_DEBUG_TRACE, ("80211> STA(%02X:%02X:%02X:%02X:%02X:%02X) ==> PortSecured\n", 
-			PRINT_MAC(pMacAddr)));
-		RTMP_DRIVER_80211_AP_MLME_PORT_SECURED(pAd, pMacAddr, 1);
-	}
-	else	
-	{
-		CFG80211DBG(RT_DEBUG_TRACE, ("80211> STA(%02X:%02X:%02X:%02X:%02X:%02X) ==> PortNotSecured\n", 
-                        PRINT_MAC(pMacAddr)));
-		RTMP_DRIVER_80211_AP_MLME_PORT_SECURED(pAd, pMacAddr, 0);
-	}
-	return 0;
-}
+    if(!(params->sta_flags_mask & BIT(NL80211_STA_FLAG_AUTHORIZED)))
+    {
+        CFG80211DBG(RT_DEBUG_ERROR, ("80211> %x ==>\n", params->sta_flags_mask));
+        return -EOPNOTSUPP;
+    }
 
+    if (params->sta_flags_set & BIT(NL80211_STA_FLAG_AUTHORIZED))
+    {
+        CFG80211DBG(RT_DEBUG_TRACE, ("80211> STA(%02X:%02X:%02X:%02X:%02X:%02X) ==> PortSecured\n", PRINT_MAC(pMacAddr)));
+        RTMP_DRIVER_80211_AP_MLME_PORT_SECURED(pAd, pMacAddr, 1);
+    }
+    else
+    {
+        CFG80211DBG(RT_DEBUG_TRACE, ("80211> STA(%02X:%02X:%02X:%02X:%02X:%02X) ==> PortNotSecured\n", PRINT_MAC(pMacAddr)));
+        RTMP_DRIVER_80211_AP_MLME_PORT_SECURED(pAd, pMacAddr, 0);
+    }
+    return 0;
+}
 
-#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,6,0))
 static struct wireless_dev* CFG80211_OpsVirtualInfAdd(
-        IN struct wiphy                                 *pWiphy,
-        IN char 										*name,
-        IN enum nl80211_iftype                 			 Type,
-        IN u32                                          *pFlags,
-        struct vif_params                               *pParams)
-#else
-static struct net_device* CFG80211_OpsVirtualInfAdd(
-        IN struct wiphy                                 *pWiphy,
-        IN char 										*name,
-        IN enum nl80211_iftype                 			 Type,
-        IN u32                                          *pFlags,
-        struct vif_params                               *pParams)
-#endif /* LINUX_VERSION_CODE: 3.6.0 */
+       IN struct wiphy             *pWiphy,
+       IN const char               *name,
+       IN unsigned char            name_assign_type,
+       IN enum nl80211_iftype      Type,
+       IN u32                      *pFlags,
+       struct vif_params           *pParams)
 {
-	VOID *pAd;
-	CMD_RTPRIV_IOCTL_80211_VIF_SET vifInfo;
-#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,6,0))
-	PWIRELESS_DEV pDev = NULL;	
-#else	
-	PNET_DEV pDev = NULL;
-#endif /* LINUX_VERSION_CODE: 3.6.0 */
-    	MAC80211_PAD_GET(pAd, pWiphy);
+    VOID *pAd;
+    CMD_RTPRIV_IOCTL_80211_VIF_SET vifInfo;
+    PWIRELESS_DEV pDev = NULL;
+    MAC80211_PAD_GET(pAd, pWiphy);
 
-	CFG80211DBG(RT_DEBUG_OFF, ("80211> %s [%s,%d, %d] ==>\n", __FUNCTION__, name, Type, strlen(name)));
+    CFG80211DBG(RT_DEBUG_OFF, ("80211> %s [%s,%d, %d] ==>\n", __FUNCTION__, name, Type, strlen(name)));
 
-	vifInfo.vifType = Type;
-	vifInfo.vifNameLen = strlen(name);
-    memset(vifInfo.vifName, 0, sizeof(vifInfo.vifName)); 	
-	NdisCopyMemory(vifInfo.vifName, name, vifInfo.vifNameLen);
+    vifInfo.vifType = Type;
+    vifInfo.vifNameLen = strlen(name);
+    memset(vifInfo.vifName, 0, sizeof(vifInfo.vifName));
+    NdisCopyMemory(vifInfo.vifName, name, vifInfo.vifNameLen);
 
-	if (RTMP_DRIVER_80211_VIF_ADD(pAd, &vifInfo) != NDIS_STATUS_SUCCESS)
-		return NULL;
+    if (RTMP_DRIVER_80211_VIF_ADD(pAd, &vifInfo) != NDIS_STATUS_SUCCESS)
+        return NULL;
 
-#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,6,0))
-	pDev = RTMP_CFG80211_FindVifEntryWdev_ByType(pAd, Type);
-#else	
-	/* Return NetDevice */
-	pDev = RTMP_CFG80211_FindVifEntry_ByType(pAd, Type);
-#endif /* LINUX_VERSION_CODE: 3.6.0 */
-	
-	return pDev;
+    pDev = RTMP_CFG80211_FindVifEntryWdev_ByType(pAd, Type);
+
+    return pDev;
 }
 
 static int CFG80211_OpsVirtualInfDel(
@@ -2416,15 +2380,15 @@ static int CFG80211_start_p2p_device(
 	return 0;
 }      
 
-static int CFG80211_stop_p2p_device(
-	struct wiphy *pWiphy,
-	struct wireless_dev *wdev)
-{
-	void *pAd;
-	struct net_device *dev = wdev->netdev;
-	CFG80211DBG(RT_DEBUG_OFF, ("80211> %s, %s [%d]==>\n", __FUNCTION__, dev->name, dev->ieee80211_ptr->iftype));
-	MAC80211_PAD_GET(pAd, pWiphy);
-	return 0;
+static void CFG80211_stop_p2p_device(
+    struct wiphy           *pWiphy,
+    struct wireless_dev    *wdev)
+{
+    void *pAd;
+    struct net_device *dev = wdev->netdev;
+    CFG80211DBG(RT_DEBUG_OFF, ("80211> %s, %s [%d]==>\n", __FUNCTION__, dev->name, dev->ieee80211_ptr->iftype));
+    MAC80211_PAD_GET(pAd, pWiphy);
+    return ;
 }
 #endif /* LINUX_VERSION_CODE: 3.6.0 */
 
@@ -2551,13 +2515,13 @@ struct cfg80211_ops CFG80211_Ops = {
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,32))
 	/* set the transmit power according to the parameters */
-	.set_tx_power				= CFG80211_OpsTxPwrSet,
+	.set_tx_power				= (VOID *) CFG80211_OpsTxPwrSet,
 	/* store the current TX power into the dbm variable */
-	.get_tx_power				= CFG80211_OpsTxPwrGet,
+	.get_tx_power				= (VOID *) CFG80211_OpsTxPwrGet,
 	/* configure WLAN power management */
 	.set_power_mgmt				= CFG80211_OpsPwrMgmt,
 	/* get station information for the station identified by @mac */
-	.get_station				= CFG80211_OpsStaGet,
+	.get_station				= (VOID *) CFG80211_OpsStaGet,
 	/* dump station callback */
 	.dump_station				= CFG80211_OpsStaDump,
 	/* notify that wiphy parameters have changed */
@@ -2637,7 +2601,7 @@ struct cfg80211_ops CFG80211_Ops = {
 	.get_antenna				= NULL,
 #endif /* LINUX_VERSION_CODE */
 	.change_bss                             = CFG80211_OpsChangeBss,
-	.del_station                            = CFG80211_OpsStaDel, 
+	.del_station                            = CFG80211_OpsStaDel,
 	.add_station                            = CFG80211_OpsStaAdd,
 	.change_station                         = CFG80211_OpsStaChg,
 //	.set_bitrate_mask                       = CFG80211_OpsBitrateSet,
Index: mt76x2e-p4rev-113843/src/chips/mt76x2.c
===================================================================
--- mt76x2e-p4rev-113843.orig/src/chips/mt76x2.c
+++ mt76x2e-p4rev-113843/src/chips/mt76x2.c
@@ -2907,6 +2907,7 @@ static INT rf_tr_agc_config(RTMP_ADAPTER
 	signed char rx_agc_fc_offset[3] = {2,2,2}; /* array idx 0: 20M, 1:40M, 2:80m */
 	UINT8 tx_agc_fc_offset[3] = {0,0,0}; /* array idx 0: 20M, 1:40M, 2:80m */
 	CHAR rf32_val, rf31_val, rf_diff;
+    return 0;
 }
 
 void mt76x2_get_tx_pwr_per_rate(RTMP_ADAPTER *ad)
